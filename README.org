#+TITLE: R package development on GitHub

# disable underscore subscripts
#+OPTIONS: ^:nil

This 60 minute tutorial explains:
- when (NOT) to publish an R package.
- how to publish an R package on [[https://github.com][GitHub]].
- the advantages and disadvantages of GitHub relative to CRAN-like
  repositories.

** When NOT to publish an R package?

Below I describe some situations in which an R package may be useful,
but there are some simpler solutions.

You want to...
- distribute some R functions. In an R package you would put the
  functions in =R/*.R= files. But if you can put the functions into a
  single R script, you can avoid having to write a package, and simply
  use the =source= function. For example Bioconductor distributes its
  installation functions via
  =source("http://bioconductor.org/biocLite.R")=.
- distribute data sets. In an R package you would use compressed
  =data/*.RData= files. But simple data sets can be distributed as R
  code (perhaps created using =dput=). For example simple data sets
  defined in R code are often used on [[http://stackoverflow.com/questions/17839153/moving-directlabels-slightly-to-left][stackoverflow]].
- make sure your R functions pass some tests. In an R package you
  would put the tests in =tests/*.R= files. But you could also just
  define tests after your functions (perhaps using =stop= or
  =stopifnot=).

** When to publish an R package?

In the situations below, writing an R package is the best solution.

You want to...
- distribute some C/C++ functions. In that case you should write an R
  package with =src/*= files (see my [[https://github.com/tdhock/when-c][when-c]] tutorial for more info).
- read documentation for your functions using =help=. In this case you
  must write an R package with =man/*.Rd= files. For example, the
  functions in my [[https://github.com/tdhock/namedCapture][namedCapture]] package are all defined in one R
  script, which can be loaded using
  =source("https://raw.githubusercontent.com/tdhock/namedCapture/master/R/str_match.R")=. But
  I wanted to document these functions, so I created the namedCapture
  package which has [[https://github.com/tdhock/namedCapture/tree/master/man][man/*.Rd]] files.
- automatically resolve installation dependencies (your code uses some
  packages, and those packages use other packages). The
  =install.packages("pkg")= function means "install =pkg=, and all
  packages required to use it."

** History, 10 minutes

| R version | date         | first            | who                   |
|-----------+--------------+------------------+-----------------------|
|           | 1992         | R                | Gentleman and Ihaka   |
|           | 1993         | R on statlib     |                       |
|      0.49 | 23 Apr 1997  | [[https://stat.ethz.ch/pipermail/r-announce/1997/000001.html][CRAN]] (src+bin)   | Tu Wien               |
|    0.65.1 | 7 Oct 1999   | install.packages | Hornik and Leisch     |
|           | 29 Aug 2006  | R-Forge          | Theussl et al.        |
|           | 8 Feb 2008   | GitHub           | Preston-Werner et al. |
|           | 22 June 2011 | devtools on CRAN | Wickham               |

Historically, the main R package distribution method has been [[https://cran.r-project.org/][CRAN]]
(and other similar repositories such as [[http://bioconductor.org/][BioConductor]]). The package
submission process involves running =R CMD build=, uploading the
resulting =pkg.tar.gz= file to ftp://cran.r-project.org/incoming/, and
then emailing =CRAN@R-project.org= with the subject line =CRAN
submission PACKAGE VERSION=. After that a human CRAN maintainer
 will read your email
and decide whether or not your package meets [[https://cran.r-project.org/web/packages/policies.html][the CRAN Repository Policy]]. 
If he decides that your package is good enough,
then it will be added to CRAN so that anyone can download it 
using the built-in =install.packages= function.

R-Forge was initiated in [[https://r-forge.r-project.org/projects/siteadmin/][2006]] and officially announced at
UseR 2008. R-Forge aims to popularize the development model that
R-core uses to develop the base R system ([[http://sugiyama-www.cs.titech.ac.jp/~toby/papers/2011-06-09-R-package-development-presentations-for-IBL/2011-06-09-HOCKING-R-Forge.pdf][for details see my slides
from a 2011 presentation at IBL]]). The number of packages on R-Forge
continues to increase every year, but more slowly since the first
version of devtools was published on CRAN in 2011.

[[file:figure-R-Forge-projects-cumulative.png]]

[[file:figure-R-Forge-registrations-per-month.png]]

The first version of the devtools package appeared on CRAN on 22
June 2011. Its =install_github= function makes it easy to install an R
package hosted on GitHub.

** Differences between CRAN, Bioconductor, R-Forge, and GitHub

Publishing a package on CRAN takes much more time than R-Forge or
GitHub. To publish a package on CRAN, you need to:
- Install R-devel: [[https://cran.r-project.org/bin/windows/base/rdevel.html][Windows]] [[https://cran.r-project.org/bin/windows/base/R-devel-win.exe][R-devel-win.exe]], [[http://r.research.att.com/][Mac]] [[http://r.research.att.com/mavericks/R-devel/R-devel-mavericks-signed.pkg][R-devel.pkg]], [[http://cran.utstat.utoronto.ca/bin/linux/][linux]],
  [[https://stat.ethz.ch/R/daily/][source]] [[https://stat.ethz.ch/R/daily/R-devel.tar.gz][R-devel.tar.gz]] (my [[https://github.com/tdhock/dotfiles/blob/master/install-r-devel.sh][install-r-devel.sh]]), [[https://hub.docker.com/r/rocker/r-devel/][docker]]. This step is
  essential since CRAN maintainers may have introduced new package
  checks in the most recent version of R.
- Using R-devel, run =R CMD build pkg= and then =R CMD check --as-cran
  pkg_version.tar.gz=. Fix any problems and check again until there
  are no more problems. I don't recommend using [[http://r-pkgs.had.co.nz/check.html][devtools::check]] since
  that is not what the CRAN maintainers use.
- Read the [[https://cran.r-project.org/web/packages/policies.html][CRAN Repository Policy]]. Even if you have read this before,
  read it again as it frequently [[https://github.com/eddelbuettel/crp/commits/master/texi][changes]]!
- Submit your package via FTP+email, [[https://cran.r-project.org/submit.html][the new web form]], or
  [[http://r-pkgs.had.co.nz/release.html][devtools::release]].

The various R package repositories provide different features to R
package developers:

| service | compilation | web       | support | versioning | tests | install        |
|---------+-------------+-----------+---------+------------+-------+----------------|
| [[http://cran.r-project.org/][CRAN]]    | yes         | vignettes | [[https://www.r-project.org/mail.html][email]]   | manual     | them  | latest version |
| [[http://www.bioconductor.org/][BioC]]    | yes         | vignettes | [[https://support.bioconductor.org/][forum]]   | svn        | them  | latest version |
| [[http://r-forge.r-project.org/][R-Forge]] | yes         | any pages | lots    | svn        | them  | latest version |
| [[https://github.com/][GitHub]]  | no          | any pages | issues  | git        | you   | any version    |

Bioconductor is similar to CRAN in terms of features, but requires a
little more effort for a submission. Its [[http://www.bioconductor.org/developers/package-submission/][policies]] explain that you
have to run =R CMD BiocCheck= and create at least one evaluated
vignette. Also you need to "Be committed to maintaining your package
across multiple release cycles."
  
*** Problem: the versionless install.packages function

=install.packages("pkg")= means "install the most recent version of
=pkg= from a CRAN-like repository." This works fine, as long as all of
the most recent versions of CRAN packages work with each other (which
is one of the goals of the CRAN system, as stated in [[http://dx.doi.org/10.1007/s00180-010-0205-5][Prospects and
Challenges in R Package Development]] by Theussl, Ligges, and Hornik).

However, in practice this causes problems when a package developer
wants to change his package, and there are other CRAN packages which
depend on it. For example, the ggplot2 package introduced some
backwards-incompatible changes in 2015, so many of the packages which
depend on ggplot2 had to be updated in response. What if the
developers of these other packages can not update them immediately?
Then their packages are removed from CRAN.

It also makes it [[http://sugiyama-www.cs.titech.ac.jp/~toby/org/HOCKING-reproducible-research-with-R.html][difficult to perform reproducible research using R]].
For example, I used R to write my PhD in 2012, and now in 2015 most of
the versions of the R packages that I used have changed.  If I
download my PhD thesis code and try to re-run the code to re-make the
results figures, I will almost certainly get errors unless I install
the specific R package versions that I used in 2012 (which I saved
along with my thesis, just in case). But the standard practice for
documenting package dependencies in R scripts is simply writing
=library(pkg)=, which does not document what version of =pkg= was
used. So for most research it is effectively impossible to have truly
reproducible computations.

I proposed the [[https://github.com/tdhock/requireGitHub][requireGitHub]] package to avoid this problem (and that
page also discussions some alternative solutions proposed by
others). Since =devtools::install_github= can install any version 
(not just the most recent version), it is possible to write 
future-proof, reproducible scripts by simply writing the 
R package version in the R script.

*** Problem: distributing packages with compiled code

One drawback to using GitHub to distribute a package with compiled
code is that devtools::install_github will only work on a system that
has a compiler. So for example it may be difficult for people with
Windows or Mac systems to install your package from GitHub. In
contrast CRAN compiles Windows and Mac binaries on their servers, and
install.packages(type="binary") will download and install those
binaries.

*** Who decides how to test your code?

In [[https://stat.ethz.ch/pipermail/r-announce/2000/000127.html][the R-1.0.0 announcement]] ([[file:R-1.html][my copy]]), Peter Dalgaard wrote that "the
base language and the API for extension writers will remain stable for
the foreseeable future." However CRAN does make [[https://github.com/eddelbuettel/crp/commits/master/texi][changes]] to its
[[https://cran.r-project.org/web/packages/policies.html][policies]], which are currently enforced by running =R CMD check
--as-cran= on [[https://cran.r-project.org/web/checks/check_results_directlabels.html][several different operating systems that R supports]].

[[https://travis-ci.org/][Travis-CI]] is a continuous integration service which gives 50 minutes
of free computation time to free/open-source software projects hosted
on GitHub. For R packages that you would like to eventually submit to
CRAN, you should use the [[https://docs.travis-ci.com/user/languages/r][instructions for the R language]] to run =R CMD
check= on Travis after every push to your GitHub repos.

If you don't want to run all of the =R CMD check= tests, you can write
your own testing script using [[https://github.com/craigcitro/r-travis/wiki][craigcitro's travis-tool.sh]] ([[https://github.com/tdhock/animint/blob/master/.travis.yml][example]]).

*** Code coverage

[[https://en.wikipedia.org/wiki/Code_coverage][Code coverage]] is a percent that indicates how much of the code in your
=pkg/R/*.R= files is executed when you run the code in =tests/*.R=. It
can be computed a by adding a call to the [[https://github.com/jimhester/covr][covr]] package at the end of
your Travis build ([[https://github.com/tdhock/namedCapture/blob/master/.travis.yml][example]]). You can see which lines of code were
executed by looking at [[https://coveralls.io/github/tdhock/animint][the coveralls.io page]]. For example [[https://coveralls.io/builds/5023162/source?filename=R%252Fknitr.R][the details
page for animint/R/knitr.R]] shows that the code for rendering an
animint inside of shiny is not run during tests on Travis.

Code coverage can be useful for
- identifying bugs in your code. You may be able to fix problems by
  writing tests for your code that is not covered.
- getting people to contribute to your free/open-source project. It is
  often much easier to write a test than it is to write code that
  implements a new feature. 

Code coverage is not computed on CRAN/R-Forge/BioConductor.

*** How to depend on other packages?

List them in the DESCRIPTION file ([[https://github.com/tdhock/animint/blob/master/DESCRIPTION][example]]). [[https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-Dependencies][Full documentation in
"Package dependencies" section of Writing R extensions]].

You can use Depends or Imports for the packages that your package
will definitely need. *Depends* packages will be attached prior to your
package (as if the library function was used). *Imports* packages will
not be attached (so the user will not have access to functions in that
other package). 

Use *Suggests* for packages that you use in examples or tests (but are
not necessary for running your functions).

The *Remotes* argument is defined by devtools (not CRAN). If it is
present, it is used by devtools::install_github to get packages from
GitHub (instead of installing them from CRAN). [[https://cran.r-project.org/web/packages/devtools/vignettes/dependencies.html][Details in
vignette("dependencies", package="devtools")]].

** Exercise: create a simple package

TODO

** The future

https://github.com/r-hub/proposal


** Historical references

R history [[https://homepage.boku.ac.at/leisch/papers/Hornik%2BLeisch-2002.pdf][from an Austrian perspective]].

From [[https://en.wikipedia.org/w/index.php?title%3DR_%2528programming_language%2529&oldid%3D689167000][Wikipedia:R_(programming_language)]]: Release 0.49 on 23 Apr 1997
"is the oldest available source release, and compiles on a limited
number of Unix-like platforms. CRAN is started on this date, with 3
mirrors that initially hosted 12 packages. Alpha versions of R for
Microsoft Windows and Mac OS are made available shortly after this
version." It did yet not have the concept of "packages" but it had the
following concept of library, excerpt from
[[file:R-0.49-man-library.txt][R-0.49/src/library/base/man/library]]:

#+BEGIN_SRC text
A library consists of a subdirectory containing a LANG(TITLe)
and LANG(INDEX) file, and subdirectories LANG(funs), LANG(man), LANG(src)
and LANG(src-c).  The LANG(TiTLE) file contains a line giving the name
of the library and a brief description. LANG(INDEX) contains a line
for each sufficiently interesting function in the library,
giving its name and a description (functions such as print methods
not usually called explicitly might not be included). 
PARA
The LANG(funs) subdirectory contains R code files with names beginning
with lowercase letters. One of these files should use LANG(library.dynam())
to load any necessary compiled code. 
PARA
Source and a Makefile for the compiled code is in LANG(src), and a pure
LANG(C) version of the source should be in LANG(src-c). In the common
case when all the source is in LANG(C) it may be convenient to make one
of these directories a symbolic link to the other. The Makefile will be
passed various machine-dependent compile and link flags, examples of
which can be seen in the LANG(eda) library.
PARA
The LANG(man) subdirectory should contain R help files for the
functions in the library.
PARA
To install a library run LANG(make libs) in LANG(RHOME/src/library) and
then run LANG(etc/lib-installhelp) in LANG(RHOME). This will reinstall
all the libraries.
#+END_SRC

The CRAN was [[https://stat.ethz.ch/pipermail/r-announce/1997/000001.html][announced]] by Kurt Hornik on 23 Apr 1997 ([[file:ANNOUNCE-CRAN.html][my copy]]). He
wrote that "prebuilt R binaries (the base distribution and
extensions)" were available. He also established the submission
process which remains largely intact to this day:
#+BEGIN_SRC text
In the short run, the process of `submitting' to CRAN is very simple:
upload to 

	ftp://ftp.ci.tuwien.ac.at/incoming

and drop me a note (Kurt.Hornik at ci.tuwien.ac.at).
#+END_SRC

The first public versions of =install.packages= and =update.packages=
appeared in =R-0.65.1/src/library/base/R/system.unix.R= (1999).
[[https://cran.r-project.org/src/base/NEWS.0][NEWS.0]] ([[file:R-1.6.0-ONEWS.txt][my copy]]) announces the first =update.packages=:

#+BEGIN_SRC text
		CHANGES IN R VERSION 0.65.1
...
    o	R INSTALL now can directly install pkg_version.tar.gz files
	as obtained from CRAN. New function update.packages()
	& friends for automatically downloading packages from CRAN and
	install them on the fly (on Unix and Windows).
#+END_SRC
